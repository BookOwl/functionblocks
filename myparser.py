#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS


__version__ = (2016, 4, 5, 15, 13, 26, 1)

__all__ = [
    'grammerParser',
    'grammerSemantics',
    'main'
]


class grammerParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 **kwargs):
        super(grammerParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            **kwargs
        )

    @graken()
    def _int_(self):
        self._pattern(r'[\-+0-9]+')

    @graken()
    def _float_(self):
        self._pattern(r'[\-+0-9]+\.[0-9]+')

    @graken()
    def _number_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._float_()
                with self._option():
                    self._int_()
                self._error('no available options')
        self.ast['number'] = self.last_node

        self.ast._define(
            ['number'],
            []
        )

    @graken()
    def _name_(self):
        self._pattern(r'[a-zA-Z_][a-zA-Z0-9_]*')
        self.ast['name'] = self.last_node

        self.ast._define(
            ['name'],
            []
        )

    @graken()
    def _call_(self):
        with self._group():
            self._name_()
            self._token('(')

            def block1():
                self._expr_()
                self._token(',')
            self._closure(block1)
            self._token(')')
        self.ast['call'] = self.last_node

        self.ast._define(
            ['call'],
            []
        )

    @graken()
    def _funcdef_(self):
        with self._group():
            self._token('define')
            self._name_()
            self._token('(')

            def block1():
                self._name_()
            self._closure(block1)
            self._token(')')
            self._token('->')
            self._expr_()
        self.ast['funcdef'] = self.last_node

        self.ast._define(
            ['funcdef'],
            []
        )

    @graken()
    def _valdef_(self):
        with self._group():
            self._token('define')
            self._name_()
            self._token('->')
            self._expr_()
        self.ast['valdef'] = self.last_node

        self.ast._define(
            ['valdef'],
            []
        )

    @graken()
    def _define_(self):
        with self._choice():
            with self._option():
                self._funcdef_()
                self.ast['@'] = self.last_node
            with self._option():
                self._valdef_()
                self.ast['@'] = self.last_node
            self._error('no available options')

    @graken()
    def _binop_(self):
        with self._group():
            self._expr_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    with self._option():
                        self._token('=')
                    with self._option():
                        self._token('!=')
                    self._error('expecting one of: != * + - / =')
            self._expr_()
        self.ast['binop'] = self.last_node

        self.ast._define(
            ['binop'],
            []
        )

    @graken()
    def _if_(self):
        with self._group():
            self._token('if')
            self._expr_()
            self._token('then')
            self._expr_()
            self._token('else')
            self._expr_()
        self.ast['if_'] = self.last_node

        self.ast._define(
            ['if'],
            []
        )

    @graken()
    def _do_(self):
        with self._group():
            self._token('do')

            def block1():
                self._expr_()
            self._positive_closure(block1)

            self._token('end')
        self.ast['do'] = self.last_node

        self.ast._define(
            ['do'],
            []
        )

    @graken()
    def _special_(self):
        with self._choice():
            with self._option():
                self._if_()
                self.ast['@'] = self.last_node
            with self._option():
                self._do_()
                self.ast['@'] = self.last_node
            self._error('no available options')

    @graken()
    def _expr_(self):
        with self._choice():
            with self._option():
                self._special_()
                self.ast['@'] = self.last_node
            with self._option():
                self._call_()
                self.ast['@'] = self.last_node
            with self._option():
                self._binop_()
                self.ast['@'] = self.last_node
            with self._option():
                self._number_()
                self.ast['@'] = self.last_node
            with self._option():
                self._name_()
                self.ast['@'] = self.last_node
            self._error('no available options')

    @graken()
    def _program_(self):

        def block0():
            self._define_()
        self._positive_closure(block0)


class grammerSemantics(object):
    def int(self, ast):
        return ast

    def float(self, ast):
        return ast

    def number(self, ast):
        return ast

    def name(self, ast):
        return ast

    def call(self, ast):
        return ast

    def funcdef(self, ast):
        return ast

    def valdef(self, ast):
        return ast

    def define(self, ast):
        return ast

    def binop(self, ast):
        return ast

    def if_(self, ast):
        return ast

    def do(self, ast):
        return ast

    def special(self, ast):
        return ast

    def expr(self, ast):
        return ast

    def program(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = grammerParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in grammerParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for grammer.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )
